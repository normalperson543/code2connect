generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model ProjectSessionToken {
  id        String   @unique @default(uuid())
  projectId String
  date      DateTime @default(now())
}

model Profile {
  id            String          @id @unique @default(uuid())
  username      String
  bio           String          @default("")
  dateCreated   DateTime        @default(now())
  projects      Project[]
  class         EduClass        @relation(fields: [eduClassId], references: [id])
  eduClassId    String
  EduAssignment EduAssignment[]
  isDisabled    Boolean         @default(false)
  isAdmin       Boolean         @default(false)
  isTeacher     Boolean         @default(false)

  clusters         Cluster[]
  managingClusters Cluster[] @relation(name: "managers")
  curatingClusters Cluster[] @relation(name: "curators")
  comments         Comment[]
  replies          Reply[]
  likedProjects    Project[] @relation(name: "likers")
}

model Project {
  id               String    @id @unique @default(uuid())
  title            String?
  description      String?
  thumbnailId      String?
  comments         Comment[]
  isPublic         Boolean   @default(false)
  commentsDisabled Boolean   @default(false)
  isFeatured       Boolean   @default(false)
  isStarter        Boolean   @default(false)

  owner     Profile?  @relation(fields: [profileId], references: [id])
  profileId String?
  clusters  Cluster?  @relation(fields: [clusterId], references: [id])
  clusterId String?
  likers    Profile[] @relation(name: "likers")
}

model Cluster {
  id String @id @unique @default(uuid())

  owner        Profile   @relation(fields: [profileId], references: [id])
  description  String    @default("")
  dateCreated  DateTime  @default(now())
  dateModified DateTime  @default(now())
  isDisabled   Boolean   @default(false)
  isIotm       Boolean   @default(false)
  projects     Project[]
  profileId    String
  managers     Profile[] @relation(name: "managers")
  curators     Profile[] @relation(name: "curators")
  comments     Comment[]
}

model Comment {
  id String @id @unique @default(uuid())

  owner       Profile  @relation(fields: [profileId], references: [id])
  contents    String   @default("")
  dateCreated DateTime @default(now())
  isDisabled  Boolean  @default(false)
  replies     Reply[]
  profileId   String
  Cluster     Cluster? @relation(fields: [clusterId], references: [id])
  clusterId   String?
  Project     Project? @relation(fields: [projectId], references: [id])
  projectId   String?
}

model Reply {
  id String @id @unique @default(uuid())

  owner       Profile  @relation(fields: [profileId], references: [id])
  contents    String   @default("")
  dateCreated DateTime @default(now())
  isDisabled  Boolean  @default(false)
  profileId   String
  Comment     Comment? @relation(fields: [commentId], references: [id])
  commentId   String?
}

model EduClass {
  id   String @id @unique @default(uuid())
  name String

  dateCreated   DateTime  @default(now())
  assocSchoolId String
  members       Profile[]
}

model EduAssignment {
  id          String   @id @unique @default(uuid())
  name        String
  description String   @default("")
  dateCreated DateTime @default(now())
  owner       Profile  @relation(fields: [profileId], references: [id])
  status      Int
  profileId   String
}
