generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model ProjectSessionToken {
  id        String   @unique @default(uuid())
  projectId String
  date      DateTime @default(now())
}

model Profile {
  id            String    @id @unique
  username      String    @unique
  bio           String    @default("")
  dateCreated   DateTime  @default(now())
  projects      Project[]
  isDisabled    Boolean   @default(false)
  isAdmin       Boolean   @default(false)
  followers     Profile[] @relation("followers")
  following     Profile[] @relation("followers")
  clusters      Cluster[]
  replies       Reply[]
  likedProjects Project[] @relation(name: "likers")

  writtenComments  Comment[] @relation("CommentOwner")
  receivedComments Comment[] @relation("CommentTarget")
}

model Project {
  id               String    @id @unique @default(uuid())
  title            String?
  description      String?
  thumbnail        String?
  comments         Comment[]
  isPublic         Boolean   @default(false)
  commentsDisabled Boolean   @default(false)
  isFeatured       Boolean   @default(false)
  isStarter        Boolean   @default(false)
  parentId         String?
  parent           Project?  @relation(name: "forks", fields: [parentId], references: [id])
  forks            Project[] @relation("forks")
  datePublished    DateTime?
  dateCreated      DateTime  @default(now())

  owner     Profile?  @relation(fields: [profileId], references: [id])
  profileId String?
  clusters  Cluster[] @relation()
  likers    Profile[] @relation(name: "likers")
}

model Cluster {
  id String @id @unique @default(uuid())

  title        String?
  owner        Profile   @relation(fields: [profileId], references: [id])
  description  String    @default("")
  dateCreated  DateTime  @default(now())
  dateModified DateTime  @default(now())
  isDisabled   Boolean   @default(false)
  isIotm       Boolean   @default(false)
  thumbnail    String?
  projects     Project[]
  profileId    String
  comments     Comment[]
}

model Comment {
  id String @id @unique @default(uuid())

  owner       Profile  @relation("CommentOwner", fields: [profileId], references: [id])
  contents    String   @default("")
  dateCreated DateTime @default(now())
  isDisabled  Boolean  @default(false)
  replies     Reply[]
  profileId   String

  targetId   String?
  targetProf Profile? @relation("CommentTarget", fields: [targetId], references: [id])

  Cluster   Cluster? @relation(fields: [clusterId], references: [id])
  clusterId String?
  Project   Project? @relation(fields: [projectId], references: [id])
  projectId String?
}

model Reply {
  id String @id @unique @default(uuid())

  owner       Profile  @relation(fields: [profileId], references: [id])
  contents    String   @default("")
  dateCreated DateTime @default(now())
  isDisabled  Boolean  @default(false)
  profileId   String
  Comment     Comment? @relation(fields: [commentId], references: [id])
  commentId   String?
}
